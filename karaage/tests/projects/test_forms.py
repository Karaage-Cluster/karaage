# Copyright 2014 The University of Melbourne
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.

from django.test import TestCase

from karaage.projects.forms import ProjectForm
from karaage.tests.fixtures import ProjectFactory


class ProjectFormTestCase(TestCase):
    def setUp(self):
        super(ProjectFormTestCase, self).setUp()
        self.project = ProjectFactory()

    def _valid_form_data(self, project=None):
        if not project:
            project = self.project
        data = {
            'pid': project.pid,
            'name': project.name,
            'description': project.description,
            'institute': project.institute.id,
            'additional_req': project.additional_req,
            'start_date': project.start_date,
            'end_date': project.end_date
            }
        return data

    def test_valid_data(self):
        form_data = self._valid_form_data()
        form_data['name'] = 'test-project'
        form = ProjectForm(data=form_data,
                           instance=self.project)
        self.assertEqual(form.is_valid(), True, form.errors.items())
        form.save()
        self.assertEqual(self.project.name, 'test-project')

    def test_invalid_pid(self):
        form_data = self._valid_form_data()
        form_data['pid'] = '!test-project'
        form = ProjectForm(data=form_data)
        self.assertEqual(form.is_valid(), False)
        self.assertEqual(
            form.errors.items(),
            [('pid',
              [u'Project names can only contain letters,'
               u' numbers and underscores'])])

    def test_default_pid(self):
        """When creating a new project, pid should be autogenerated"""
        form_data = self._valid_form_data(ProjectFactory.build())
        form_data['institute'] = self.project.institute.id
        form_data['pid'] = ''  # Auto generate
        form = ProjectForm(data=form_data)
        self.assertEqual(form.is_valid(), True, form.errors.items())
        project = form.save()
        self.assertEqual(project.pid, 'pinst0001')

    def test_valid_form(self):
        """Test changing form values but keeping the same pid."""
        form_data = self._valid_form_data(ProjectFactory.build())
        form_data['institute'] = self.project.institute.id
        form_data['pid'] = ''  # Unspecified
        pid = self.project.pid
        form = ProjectForm(data=form_data, instance=self.project)
        self.assertEqual(form.is_valid(), True, form.errors.items())
        project = form.save()
        self.assertEqual(project.pid, pid)

    def test_changing_pid(self):
        """Changing a project pid should cause an error"""
        form_data = self._valid_form_data(ProjectFactory.build())
        form_data['institute'] = self.project.institute.id
        form_data['pid'] = 'Banana123'
        form = ProjectForm(data=form_data, instance=self.project)
        self.assertEqual(form.is_valid(), False)
        self.assertEqual(
            form.errors.items(),
            [('pid',
              [u"Project ID's are not allowed to be changed."])])
