name: Python application

on: [push, pull_request]

jobs:
  test:
    name: Databaseless tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install system dependancies
      run: |
        sudo apt-get update
        sudo apt-get install libcrack2-dev
    - name: Install pipenv
      uses: dschep/install-pipenv-action@v1
    - name: Install python dependancies
      run: |
        pipenv sync --dev
    - name: Run tests
      run: |
        pipenv run ./setup.py --version
        pipenv run make -C docs/admin html
        pipenv run isort --check --diff karaage
        pipenv run flake8 karaage
        pipenv run ./manage.py makemigrations --settings=karaage.tests.settings --check --dry-run

    - name: Verify git tag vs. version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        pipenv run ./setup.py verify --version ${VERSION}
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

  test-mysql:
    name: Mysql tests
    runs-on: ubuntu-latest
    needs: test
    env:
        DATABASE_URL: mysql://root:z9Pm29jg9EfJ6m@127.0.0.1/test

    steps:
    - name: Shutdown Ubuntu MySQL
      run: sudo service mysql stop
    - name: Install mysql
      uses: mirromutth/mysql-action@v1.1
      with:
        mysql version: '8.0'
        mysql database: 'test'
        mysql user: 'test'
        mysql password: 'z9Pm29jg9EfJ6m'
        mysql root password: 'z9Pm29jg9EfJ6m'
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install system dependancies
      run: |
        sudo apt-get update
        sudo apt-get install libcrack2-dev slapd ldap-utils
    - name: Remove apparmor restrictions on slapd
      run: |
          sudo apt-get install apparmor-utils
          sudo aa-complain /usr/sbin/slapd
    - name: Install pipenv
      uses: dschep/install-pipenv-action@v1
    - name: Install python dependancies
      run: |
        pipenv sync --dev
    - name: Run tests
      run: |
        pipenv run ./manage.py collectstatic --settings=karaage.tests.settings --noinput
        pipenv run ./manage.py migrate --settings=karaage.tests.settings
        mkdir test-reports
        pipenv run python -m tldap.test.slapd python -m pytest --cov=karaage --junitxml=test-reports/junit.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results
        path: test-reports/junit.xml

  test-postgresql:
    name: Postgresql tests
    runs-on: ubuntu-latest
    needs: test
    env:
        DATABASE_URL: postgresql://test:z9Pm29jg9EfJ6m@localhost/test?sslmode=disable

    steps:
    - name: Install postgresql
      uses: harmon758/postgresql-action@v1
      with:
        postgresql version: '11'
        postgresql db: 'test'
        postgresql user: 'test'
        postgresql password: 'z9Pm29jg9EfJ6m'
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install system dependancies
      run: |
        sudo apt-get update
        sudo apt-get install libcrack2-dev slapd ldap-utils
    - name: Remove apparmor restrictions on slapd
      run: |
          sudo apt-get install apparmor-utils
          sudo aa-complain /usr/sbin/slapd
    - name: Install pipenv
      uses: dschep/install-pipenv-action@v1
    - name: Install python dependancies
      run: |
        pipenv sync --dev
    - name: Run tests
      run: |
        pipenv run ./manage.py collectstatic --settings=karaage.tests.settings --noinput
        pipenv run ./manage.py migrate --settings=karaage.tests.settings
        mkdir test-reports
        pipenv run python -m tldap.test.slapd python -m pytest --cov=karaage --junitxml=test-reports/junit.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results
        path: test-reports/junit.xml

  publish-docker:
    name: Publish Docker
    runs-on: ubuntu-latest
    needs: [test-mysql, test-postgresql]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags'))

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=brianmay/karaage
          DOCKER_PLATFORMS=linux/386,linux/amd64
          SLURM_VER=20.02

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            TAG="slurm20.02"
          else
            VERSION=beta
            TAG="slurm20.02-beta"
          fi

          TAGS="--tag ${DOCKER_IMAGE}:${TAG}"

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg SLURM_VER=${SLURM_VER} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAGS} \
            --file ./Dockerfile ./
      - name: Docker Buildx (build)
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=false" \
            ${{ steps.prepare.outputs.buildx_args }}
      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
      - name: Docker Buildx (push)
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            ${{ steps.prepare.outputs.buildx_args }}
      - name: Docker Check Manifest
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.tag }}
      - name: Clear
        run: |
          rm -f ${HOME}/.docker/config.json

  publish-pypi-prod:
    name: Publish Pypi Prod
    runs-on: ubuntu-latest
    needs: [test-mysql, test-postgresql]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install requirements
        run: |
          pip install wheel
      - name: Create packages
        run: |
          ./setup.py sdist bdist_wheel
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_PASSWORD }}
